# from email.header import SPACE
from tkinter import *
import random

GAME_WIDTH = 1000
GAME_HEIGHT = 700
SPEED = 100
SPACE_SIZE = 40
BODY_PARTS = 3
SNAKE_COLOUR = "BLUE"
# SNAKE_COLOUR = "00FF00"
FOOD_COLOUR = "YELLOW"
# FOOD_COLOUR = "FF0000"
BACKGROUND_COLOUR = "BLACK"


# BACKGROUND_COLOUR = "000000"


class Snake:
    def __init__(self):
        self.body_size = BODY_PARTS
        self.coordinates = []
        self.square = []

        for i in range(0, BODY_PARTS):
            self.coordinates.append([0,0])
        for x, y in self.coordinates:
            square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOUR, tags="snake")
            self.square.append(square)


class Food:
    def __init__(self, canvas):  # Accept canvas as parameter
        x = random.randint(0, int((GAME_WIDTH / SPACE_SIZE) - 1)) * SPACE_SIZE
        y = random.randint(0, int((GAME_HEIGHT / SPACE_SIZE) - 1)) * SPACE_SIZE

        self.coordinates = [x, y]
        canvas.create_oval(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=FOOD_COLOUR, tag="food")


def next_turn(snake, food):
    x, y = snake.coordinates[0]

    if direction == "up":
        y -= SPACE_SIZE
    elif direction == "down":
        y += SPACE_SIZE
    elif direction == "left":
        x -= SPACE_SIZE
    elif direction == "right":
        x += SPACE_SIZE
    snake.coordinates.insert(0, (x, y))

    square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOUR)

    snake.square.insert(0, square)

    if x == food.coordinates[0] and y == food.coordinates[1]:

        global score
        score += 1          # for increasing score

        label.config(text="score:{}".format(score))

        canvas.delete("food")
        food = Food(canvas)

    else:
       del snake.coordinates[-1]

       canvas.delete(snake.square[-1])
       del snake.square[-1]

    if check_collision(snake):
        game_over()
        return  # Stops further execution



    window.after(SPEED, next_turn,snake, food  )


def change_direction(new_direction):

    global direction

    if new_direction == 'left':
        if direction != 'right':
            direction = new_direction

    elif new_direction == 'right':
        if direction != 'left':
            direction = new_direction

    elif new_direction == 'up':
        if direction != 'down':
            direction = new_direction

    elif new_direction == 'down':
        if direction != 'up':
            direction = new_direction


def check_collision(snake):

    x, y = snake.coordinates[0]

    if x < 0 or x >= GAME_WIDTH:
        return True

    elif y < 0 or y >= GAME_HEIGHT:

        return True

    for body_parts in snake.coordinates[1:]:
        if x == body_parts[0] and y == body_parts[1]:
            print("GAME OVER")
            return True

    return False


def game_over():
    canvas.delete(ALL)
    canvas.create_text( canvas.winfo_width()/2, canvas.winfo_height()/2, font=('consoles',70), text="GAME OVER", fill="red",tags="gameover" )


window = Tk()
window.title("Snake Game")
window.resizable(False, False)

score = 0
direction = "down"
label = Label(window, text="Score:{}".format(score), font=("consolas", 40))
label.pack()

canvas = Canvas(window, bg=BACKGROUND_COLOUR, height=GAME_HEIGHT, width=GAME_WIDTH)
canvas.pack()

window.update()

window_width = window.winfo_width()
window_height = window.winfo_height()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

x = int((screen_width / 2) - (window_width / 2))
y = int((screen_height / 2) - (window_height / 2))

window.geometry(f"{window_width}x{window_height}+{x}+{y}")

window.bind('<Left>', lambda event: change_direction('left'))
window.bind('<Right>', lambda event: change_direction('right'))
window.bind('<Up>', lambda event: change_direction('up'))
window.bind('<Down>', lambda event: change_direction('down'))


snake = Snake()



food = Food(canvas)

next_turn(snake, food)
window.mainloop()
